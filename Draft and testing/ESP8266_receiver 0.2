// Funziona tutto

#include <ESP8266WiFi.h>          //https://github.com/esp8266/Arduino
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>
#include <WiFiClient.h>
#include <RF24.h>

#define LED 5
#define BUTTON 16

// Remote site information
const char http_site[] = "bars.slartitorto.eu";
const int http_port = 80;
char receivePayload[32]="";

// Initialize RF24 library
RF24 radio(4,15);

// --------------------------------
// setup ruotine, run once
void setup() {
  Serial.begin(115200);
  pinMode(LED, OUTPUT);
  pinMode(BUTTON, INPUT_PULLUP);

  //Local intialization. Once its business is done, there is no need to keep it around
  WiFiManager wifiManager;
  // prepare function to perform before configuration: put RED_LED on
  wifiManager.setAPCallback(configModeCallback);
  //fetches ssid and pass from eeprom and tries to connect
  //if it does not connect it starts an access point
  //and goes into a blocking loop awaiting configuration
  wifiManager.autoConnect("BARS_AccessPoint");
  // put RED_LED off after configuration
  digitalWrite(LED, LOW);

  yield();
  restartRadio();                    // turn on and configure radio

  // end of setup
}

// --------------------------------
// main program

void loop() {

  delay(20);
  if (radio.available()) {
    while (radio.available()) {
      yield();
      uint8_t len = radio.getDynamicPayloadSize();
      radio.read(receivePayload, len);

      // *** Separator ":" count
      const char * z = receivePayload;
      int separator_count = 0;
      int m;
      for (m=0; z[m]; m++)
      {
        if(z[m] == ':') {separator_count ++;}
      }

      // *** OK if 5 or 6 separators (BARS0 or BARS1 hardware)
      if (separator_count == 5 || separator_count == 6)
      {
        digitalWrite(LED, HIGH);

        char receivePayload_crypted[32]="";
        char key[33] = "73984143674635298574635272884776";
        unsigned int i;
        for(i=0;i<strlen(receivePayload);++i)
        {
          receivePayload_crypted[i] = receivePayload[i] + key[i] -30;
        }

        // Send data to sink

        WiFiClient client;
        if (!client.connect(http_site, http_port) ) {
          blink_error();
        } else {
          client.print("GET /datasink.php?data=");
          client.print(receivePayload_crypted);

          client.println(" HTTP/1.1");
          client.print("Host: ");
          client.println(http_site);
          client.println("Connection: close");
          client.println();
        }
        digitalWrite(LED, LOW);
      }
    }
  }
}

// --------------------------------

void restartRadio(){
  yield();
  radio.begin();
  radio.enableDynamicPayloads();
  radio.setAutoAck(1);
  radio.setRetries(15,15);
  radio.setDataRate(RF24_250KBPS);
  radio.setPALevel(RF24_PA_MAX);
  radio.setChannel(76);
  radio.setCRCLength(RF24_CRC_16);
  radio.openReadingPipe(1,0xF0F0F0F0E1LL);
  radio.stopListening();
  radio.startListening();
}

// --------------------------------

void blink_error(){
  int m;
  for (m=0; m<200; m++)
  {
    digitalWrite(LED,HIGH);
    delay(200);
    digitalWrite(LED,LOW);
    delay(200);
  }
}

// --------------------------------

// Turn LED on if WiFiManager goes in Captive Portal Mode
void configModeCallback (WiFiManager *myWiFiManager) {
  digitalWrite(LED, HIGH);
}

// --------------------------------
