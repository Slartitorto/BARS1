// Rev 0.3a

// ---  rispetto al 0.3

// Alla prima accensione registra in Eprom il router name e la key, entrambi presi dal
// server su db; in questo modo non ho da personalizzare il codice per ogni installazione
// necessita della tabella new_routers popolata

// ---  rispetto al 0.2c

// versione senza pulsante: se riceve un count = 0000 fa una get per ottenere
// il period di quel serial e lo ritrasmette al sensore che sta in attesa 10 sec.
// Attenzione: deve cambiare il firmware, il DB, device_settings e get_period

// ---  rispetto al 0.2b (che funziona) cambio metodo: AP con captive portal solo on demand

// all'accensione prova a connettersi e se non si connette lampeggia e riprova
// finchè non si connette oppure finchè non si preme il tasto e solo allora va
// in APmode.
// Anche nel ciclo loop() se premi il tasto va in APmode con captive portal.
// Attenzione che quando premi il tasto, resetta le credenziali in eprom; quindi
// se lo spegni mentre sta in APmode, quando lo
// riaccendi non riuscirà a connettersi e lampeggia veloce all'infinito finchè
// non premi il tasto.
// Se sbagli le credenziali, non esce dalla modalità AP finchè non le metti
// giuste; nel frattempo il led resta acceso.


// ------ README -------
// led lampeggiante veloce -> sta provando a connettersi alla rete
// led fisso -> sta in APmode con captive portal attivo
// led lampeggiante lento -> errore nella connessione http verso il server (80 sec., poi riprova)
// lampo led -> ricezione dei dati ed invio al server

// * nRF24L01+  ESP8266
// * VCC        VCC
// * CE         GPIO4
// * CSN/CS     GPIO15
// * SCK        GPIO14
// * MISO       GPIO12
// * MOSI       GPIO13
// * GND        GND

// usare NODE MCU (ESP-12E) come tipo di arduino
// oppure "Generic ESP8266 Module"

#include <ESP8266WiFi.h>          //https://github.com/esp8266/Arduino
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>
#include <WiFiClient.h>
#include <RF24.h>
#include <EEPROM.h>

#define LED 4
#define BUTTON 16

// Remote site information
const char http_site[] = "bars.slartitorto.eu";
const int http_port = 80;

// global variables
char key[33];
char router_name[7];

// Initialize RF24 library
RF24 radio(5,15);


// --------------------------------
// setup routine, run once
void setup() {

  pinMode(LED, OUTPUT);
  pinMode(BUTTON, INPUT_PULLUP);

  WiFi.begin();
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    led_blink();
    if (digitalRead(BUTTON) == LOW) {
      captive_portal();
    }
  }

  WiFiClient client;

  EEPROM.begin(64);
  int test1 = EEPROM.read(50);
  int test2 = EEPROM.read(51);
  int test3 = EEPROM.read(52);
  int test4 = EEPROM.read(53);

  // test numeri chiave presi a caso per eeprom vergine si/no
  if (test1 != 12 || test2 != 137 || test3 != 219 || test4 != 95) {

    // --- case eeprom not forged
    client.connect(http_site, http_port);
    client.print("GET /get_new_router.php");
    client.println(" HTTP/1.1");
    client.print("Host: ");
    client.println(http_site);
    client.println("Connection: close");
    client.println();

    // timeout
    unsigned long timeout = millis();
    while (client.available() == 0) {
      if (millis() - timeout > 5000) {
        client.stop();
        return;
      }
    }

    // Read the line of the reply from server and put it in the int array
    int router_name_and_key[40];
    while(client.available()) {
      String line = client.readStringUntil('\r');
      for (int i=1;i<40;i++){
        router_name_and_key[i]=line.charAt(i);
      }
    }

    // eeprom clearing
    for (int i = 1; i < 40; i++) {
      EEPROM.write(i,0);
    }
    EEPROM.commit();

    // eeprom write router_name ":" key
    for (int i = 1; i < 40; i++) {
      EEPROM.write(i,router_name_and_key[i]);
    }
    EEPROM.commit();

    // mark eeprom as forged
    EEPROM.write(50,0);
    EEPROM.write(51,0);
    EEPROM.write(52,0);
    EEPROM.write(53,0);
    EEPROM.commit();

    EEPROM.write(50,12);
    EEPROM.write(51,137);
    EEPROM.write(52,219);
    EEPROM.write(53,95);
    EEPROM.commit();
  }

  // eeprom read router_name
  for (int i = 1; i < 7; i++) {
    router_name[i-1] = EEPROM.read(i);
  }
  router_name[6]=0;
  // eeprom read key
  for (int i = 8; i < 40; i++) {
    key[i-8] = EEPROM.read(i);
  }
  key[33]=0;


  // TEST: send router_name & key to server - to be removed
  client.connect(http_site, http_port);
  client.print("GET /datasink.php?router_name=");
  for (int i = 0; i < 6; i++) {
    client.print(char(router_name[i]));
  }
  client.print("&key=");
  for (int i = 0; i < 39; i++) {
    client.print(char(key[i]));
  }
  client.println(" HTTP/1.1");
  client.print("Host: ");
  client.println(http_site);
  client.println("Connection: close");
  client.println();
  // END test: removed until here

  restartRadio();
}

// end setup
// --------------------------------
// main program

void loop() {

  if (digitalRead(BUTTON) == LOW) {
    captive_portal();
  }

  if (radio.available()) {
    while (radio.available()) {
      yield();
      uint8_t len = radio.getDynamicPayloadSize();
      char receivePayload[32]="";
      radio.read(receivePayload, len);

      // *** Separator ":" count
      const char * z = receivePayload;
      char period;
      int separator_count = 0;
      int m;
      for (m=0; z[m]; m++)
      {
        if(z[m] == ':') {separator_count ++;}
      }

      // *** OK if 5 or 6 separators (BARS0 or BARS1 hardware)
      if (separator_count == 5 || separator_count == 6)
      {
        digitalWrite(LED, HIGH);

        char receivePayload_crypted[32]="";
        char serial[5] ="";
        char count[5]="";
        serial[0] = receivePayload[2];
        serial[1] = receivePayload[3];
        serial[2] = receivePayload[4];
        serial[3] = receivePayload[5];
        serial[4] = 0;

        count[0] = receivePayload[7];
        count[1] = receivePayload[8];
        count[2] = receivePayload[9];
        count[3] = receivePayload[10];
        count[4] = 0;

        unsigned int i;
        for(i=0;i<strlen(receivePayload);++i)
        {
          receivePayload_crypted[i] = receivePayload[i] + key[i] -30;
        }

        // Send data to sink
        WiFiClient client;
        if (!client.connect(http_site, http_port) ) {
          blink_error();
        } else {
          client.print("GET /datasink.php?data=");
          client.print(receivePayload_crypted);
          client.print("&router=");
          client.print(router_name);

          client.println(" HTTP/1.1");
          client.print("Host: ");
          client.println(http_site);
          client.println("Connection: close");
          client.println();
        }

        // if count = 0000 get period and retrasmit it to that sensor
        // callback sintax is nnnn:c (n=nodeID;c=code_period)
        if (atoi(count) == 0) {
          client.connect(http_site, http_port);
          client.print("GET /get_period.php?serial=");
          client.print(serial);
          client.println(" HTTP/1.1");
          client.print("Host: ");
          client.println(http_site);
          client.println("Connection: close");
          client.println();

          unsigned long timeout = millis();
          while (client.available() == 0) {
            if (millis() - timeout > 5000) {
              client.stop();
              return;
            }
          }

          // Read all the lines of the reply from server
          while(client.available()) {
            String line = client.readStringUntil('\r');
            period = line.charAt(1);
          }
          client.connect(http_site, http_port);
          client.print("GET /get_period.php?received=");
          client.print(period);
          client.println(" HTTP/1.1");
          client.print("Host: ");
          client.println(http_site);
          client.println("Connection: close");
          client.println();

          // Prepare outbuffer
          char outBuffer[7]= "";
          outBuffer[0]=serial[0];
          outBuffer[1]=serial[1];
          outBuffer[2]=serial[2];
          outBuffer[3]=serial[3];
          outBuffer[4]=':';
          outBuffer[5]=period;
          outBuffer[6]=0;

          restartRadio();
          radio.stopListening();
          radio.openWritingPipe(0xF00FF0F0E1LL);
          delay(5);
          radio.write(outBuffer, strlen(outBuffer));
          radio.startListening();
        }
        digitalWrite(LED, LOW);
      }
    }
  }
}

// --------------------------------

void restartRadio(){
  yield();
  radio.begin();
  radio.enableDynamicPayloads();
  radio.setAutoAck(1);
  radio.setRetries(15,15);
  radio.setDataRate(RF24_250KBPS);
  radio.setPALevel(RF24_PA_MAX);
  radio.setChannel(76);
  radio.setCRCLength(RF24_CRC_16);
  radio.openReadingPipe(1,0xF0F0F0F0E1LL);
  radio.stopListening();
  radio.startListening();
}

// --------------------------------

void led_blink(){
  int m;
  for (m=0; m<10; m++)
  {
    digitalWrite(LED,HIGH);
    delay(100);
    digitalWrite(LED,LOW);
    delay(100);
  }
}

// --------------------------------

void blink_error(){
  int m;
  for (m=0; m<200; m++)
  {
    digitalWrite(LED,HIGH);
    delay(200);
    digitalWrite(LED,LOW);
    delay(200);
  }
}

// --------------------------------

void captive_portal() {
  delay(1000);
  digitalWrite(LED, HIGH);

  WiFiManager wifiManager;
  wifiManager.resetSettings();
  wifiManager.startConfigPortal("BARS_AccessPoint");
  digitalWrite(LED, LOW);
  ESP.restart();
}

// --------------------------------
