// Funziona, anche con nrf24l01
// solo il captive portal on demand (startConfigPortal function)
// non salva le nuove credenziali e l'ESP si aggancia sul vecchio SSID
// gestirebbe il captivo portal on demand tramite interrupt
// e accende il led rosso quando si trova in configurazione
// si connette al server remoto e fa get ogni 3 secondi

#include <ESP8266WiFi.h>          //https://github.com/esp8266/Arduino
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>
#include <WiFiClient.h>
#include <RF24.h>

#define RED_LED 5
// #define TRIGGER_PIN 5

// Remote site information
const char http_site[] = "bars.slartitorto.eu";
const int http_port = 80;
int startCaptivePortal_flag = 0;

RF24 radio(4,15);

// --------------------------------
void setup() {

      pinMode(RED_LED, OUTPUT);
//      pinMode(TRIGGER_PIN, INPUT_PULLUP);

      Serial.begin(115200);

      //Local intialization. Once its business is done, there is no need to keep it around
    WiFiManager wifiManager;

      // prepare function to perform before configuration: put RED_LED on
    wifiManager.setAPCallback(configModeCallback);

      //fetches ssid and pass from eeprom and tries to connect
      //if it does not connect it starts an access point
      //and goes into a blocking loop awaiting configuration
    wifiManager.autoConnect("BARS_AP");

      // put RED_LED off after configuration
      digitalWrite(RED_LED, LOW);

 //     attachInterrupt(TRIGGER_PIN, startCaptivePortal_up_flag, FALLING);


        // init radio for writing on channel 76
    radio.begin();
    radio.enableDynamicPayloads();
    radio.setAutoAck(1);
    radio.setRetries(15,15);
    radio.setDataRate(RF24_250KBPS);
    radio.setPALevel(RF24_PA_MAX);
    radio.setChannel(76);
    radio.setCRCLength(RF24_CRC_16);
    radio.openReadingPipe(1,0xF0F0F0F0E1LL);
    radio.startListening();

   // end of setup
}


// --------------------------------
void configModeCallback (WiFiManager *myWiFiManager) {
    digitalWrite(RED_LED, HIGH);
}


// --------------------------------
void startCaptivePortal_up_flag () {
    startCaptivePortal_flag = 1;
    digitalWrite(RED_LED, HIGH);
    }


// --------------------------------
void loop() {
//if (startCaptivePortal_flag == 1){
//    WiFiManager wifiManager;
//    wifiManager.startConfigPortal("BARS_AP");
//    // sembra che non salvi le credenziali e non si agganci alla nuova rete; resta sulla vecchia.
//    delay(3000);
//    ESP.reset();
//    delay(5000);
//    digitalWrite(RED_LED, LOW);
//    startCaptivePortal_flag = 0;
//    }
char receivePayload[32]="";

  // *** Sleep 20 ms
  delay(20);

  while (radio.available())
  {
    // *** Read from radio until payload size is reached
    uint8_t len = radio.getDynamicPayloadSize();
    radio.read(receivePayload, len);
//digitalWrite(RED_LED, HIGH);
    // *** Separator ":" count
    const char * z = receivePayload;
    int separator_count = 0;
    int m;
    for (m=0; z[m]; m++)
    {
      if(z[m] == ':') {separator_count ++;}
    }

    // *** OK if 5 or 6 separators (BARS0 or BARS1 hardware)
    if (separator_count == 5 || separator_count == 6)
    {
      char receivePayload_crypted[32]="";
      char key[33] = "73843932856389593857692387659387";
      unsigned int i;
      for(i=0;i<strlen(receivePayload);++i)
      {
        receivePayload_crypted[i] = receivePayload[i] + key[i] -30;
      }
//digitalWrite(RED_LED, LOW);
     WiFiClient client;
     if ( client.connect(http_site, http_port) ) {
     client.print("GET /datasink.php?data=");
     client.println (receivePayload);
     client.print("Host: ");
     client.println(http_site);
     client.println("Connection: close");
     client.println();
     }
    }
  }
}
